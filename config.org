#+options: ':t *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: config
#+date: <2020-05-14 Thu>
#+author: Enze Chi
#+email: Enze.Chi@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.3 (Org mode 9.4)
#+startup: overview

* User Information
#+begin_src emacs-lisp
(setq user-full-name "Enze Chi")
(if (string= (system-name) "Enzes-MacBook-Pro.local")
    (setq user-mail-address "Enze.Chi@gmail.com")
  (setq user-mail-address "Enze.Chi@optiver.com.au"))
#+end_src

* Appearance
** Fonts
#+begin_src emacs-lisp
(if (> (x-display-pixel-width) 2000)
    (setq doom-font (font-spec :family "Go Mono for Powerline" :size 22))
  (setq doom-font (font-spec :family "Go Mono for Powerline" :size 12)))
#+end_src

** Display time with date
Display date and time in 24h format.
#+begin_src emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(display-time-mode t)
#+end_src

** Full screen at startup
#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

* Key bindings
Change local leader key to =,=.

#+begin_src emacs-lisp
(setq doom-localleader-key ",")
#+end_src

Show =which-key= window faster.
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5)
#+end_src

Bind =z $= to =flyspell-=
#+begin_src emacs-lisp
(map! :n "z $" #'flyspell-correct-word-before-point)
#+end_src

#+begin_src emacs-lisp
(map! :leader
      :n "j l" #'evil-avy-goto-line)
#+end_src
* Languages
** C++
*** Key bindings
#+begin_src emacs-lisp
(after! cc-mode
  (map! :localleader
        :map c++-mode-map
        (:prefix ("g" . "+goto")
                 :desc "goto definition"     "g" #'lsp-find-definition
                 :desc "goto declaration"    "d" #'lsp-find-declaration
                 :desc "goto reference"      "r" #'lsp-find-references
                 :desc "goto implementation" "i" #'lsp-find-implementation)))
#+end_src
** Go
Format code before save.
#+begin_src emacs-lisp
(after! go-mode
  (add-hook! 'before-save-hook #'gofmt-before-save))
#+end_src

#+RESULTS:
| gofmt-before-save |

** Org
*** Review
**** Capture templates
Add review capture template.
#+begin_src emacs-lisp
(after! org
  (setq ec/org-capture-review-file (expand-file-name "reviews.org" org-directory))
  (mapc (lambda (template)
          (add-to-list 'org-capture-templates template))
        '(("r" "Review")
          ("rw" "Weekly" entry (file+olp+datetree ec/org-capture-review-file "Weekly") "* %U\n%?" :tree-type week)
          ("rm" "Monthly" entry (file+olp+datetree ec/org-capture-review-file "Monthly") "* %U\n%?")
          ("ry" "Yearly" entry (file+olp+datetree ec/org-capture-review-file "Yearly") "* %U\n%?"))))
#+end_src

**** Helper functions

***** Open review file in other window
#+begin_src emacs-lisp
(after! org
  (defun ec/open-review-in-other-window ()
    "Open review org file in other-window."
    (interactive)
    (find-file-other-window ec/org-capture-review-file)))
#+end_src

*** Babel
**** http
Make http request within org-mode babel with [[https://github.com/zweifisch/ob-http][ob-http]].
#+begin_src emacs-lisp
(use-package! ob-http
  :init
  (after! org
    (add-to-list 'org-babel-load-languages '(http . t))))
#+end_src

#+begin_src http :pretty :tangle no
GET https://www.google.com
#+end_src

**** Functions
***** Kill session
#+begin_src emacs-lisp
(defun ec-org-babel-kill-session ()
  "Kill session for current code block."
  (interactive)
  (unless (org-in-src-block-p)
    (error "You must be in a src-block to run this command"))
  (save-window-excursion
    (org-babel-switch-to-session)
    (kill-buffer)))
#+end_src

*** Log & Drawer
#+begin_src emacs-lisp
(after! org
  (setq org-log-into-drawer t
        org-log-state-notes-into-drawer t
        org-log-done 'time
        org-log-repeat 'time
        org-log-redeadline 'note
        org-log-reschedule 'note))
#+end_src

*** Property
#+begin_src emacs-lisp
(after! org
  (setq org-use-property-inheritance t
        org-catch-invisible-edits 'smart))
#+end_src

*** Agenda
#+begin_src emacs-lisp
(after! org
  (add-to-list 'org-modules 'org-habit)
  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t))
#+end_src

Add "*.org.gpg" to agenda file list.
#+begin_src emacs-lisp
(after! org
  (unless (string-match-p "\\.gpg" org-agenda-file-regexp)
    (setq org-agenda-file-regexp
          (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                                    org-agenda-file-regexp))))
#+end_src

Add agenda command for weekly review.
#+begin_src emacs-lisp
(after! org-agenda
  (setq org-agenda-custom-commands
        '(("r" . "Review")
          ("rw" "Completed and/or deferred tasks from previous week"
           ((agenda "" ((org-agenda-span 7)
                        (org-agenda-start-day "-7d")
                        (org-agenda-show-log t))))
           ((org-agenda-compact-blocks t))))))
#+end_src

*** Export
#+begin_src emacs-lisp
(after! org
  (setq org-latex-listings 'minted)
  (setq org-latex-packages-alist '(("" "minted"))))
#+end_src

*** Roam
#+begin_src emacs-lisp
(after! org
  (when (featurep! +roam)
    (setq org-roam-directory (expand-file-name "roam" org-directory))
    ;; (use-package! org-journal
    ;;   :bind
    ;;   ("SPC n j" . org-journal-new-entry)
    ;;   :custom
    ;;   (org-journal-dir org-roam-directory)
    ;;   (org-journal-date-prefix "#+TITLE: ")
    ;;   (org-journal-file-format "%Y-%m-%d.org")
    ;; (org-journal-date-format "%A, %d %B %Y"))
    (setq org-journal-enable-agenda-integration t)))
#+end_src

Add =roam= capture template.
#+begin_src emacs-lisp
(after! org-roam
  (map! :localleader
        :map org-mode-map
        :desc "jump to index" "mj" #'org-roam-jump-to-index)
  (setq org-roam-ref-capture-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+TITLE: ${title}
    ,#+ROAM_KEY: ${ref}
    - source :: ${ref}"
           :unnarrowed t))))
#+end_src

#+RESULTS:

*** TODOs
#+begin_src emacs-lisp
(after! org
  (setq org-enforce-todo-checkbox-dependencies t))
#+end_src

*** Key bindings


*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! ob-http
  :recipe (:host github
                 :repo "zweifisch/ob-http"))
#+end_src

** Python
#+begin_src emacs-lisp
(setq python-shell-completion-native-enable nil)
#+end_src
** VHDL
*** Initialization
#+begin_src emacs-lisp
(after! vhdl-mode
  (defun ec-vhdl-init ()
    "Initial function which should be added to VHDL mode hook."
    (interactive)
    (setq-default
     vhdl-basic-offset 4
     vhdl-clock-edge-condition 'function
     vhdl-conditions-in-parenthesis t
     vhdl-end-comment-column 100
     vhdl-highlight-special-words t
     vhdl-highlight-translate-off t
     vhdl-highlight-verilog-keywords t
     vhdl-include-port-comments t
     vhdl-include-type-comments t
     vhdl-inline-comment-column 70
     vhdl-instance-name '(".*" . "i_\\&")
     vhdl-reset-active-high t
     vhdl-reset-kind 'sync
     vhdl-standard '(8 (math))
     vhdl-underscore-is-part-of-word t
     vhdl-upper-case-constants t
     vhdl-upper-case-enum-values nil)
    (add-to-list 'vhdl-offsets-alist '(arglist-close . 0))
    (advice-add 'lsp-hover :around #'ec-skip-lsp-hover-on-empty-line)))
#+end_src

*** VHDL-TOOL
Define vhdl-tool config file.
#+begin_src emacs-lisp
(defvar ec-vhdl-tool-config "vhdltool-config.yaml"
  "vhdl-tool config file")
#+end_src

Add =vhdl-tool= as flycheck checker.
#+begin_src emacs-lisp
(after! flycheck
  (flycheck-define-checker vhdl-tool
    "A VHDL syntax checker, type checker and linter using VHDL-Tool.
See `http://vhdltool.com'."
    :command ("vhdl-tool" "client" "lint" "--compact" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ":w:" (message) line-end)
     (error line-start (file-name) ":" line ":" column ":e:" (message) line-end))
    :modes vhdl-mode))
;; (add-to-list 'flycheck-checkers 'vhdl-tool)
#+end_src

I haven't found good solution to configure =vhdl-tool= as default checker. I
will try to do it in =.dir-local.el= as
#+begin_src emacs-lisp :tangle no
((vhdl-mode
  (flycheck-checker . 'vhdl-tool)))
#+end_src

Flycheck hook function to select =vhdl-tool= as checker.
#+begin_src emacs-lisp
(after! flycheck
  (defun ec-vhdl-setup-flycheck-after-lsp ()
    "Setup vhdl-tool as flycheck checker for VHDL mode"
    (when (eq major-mode 'vhdl-mode)
      (flycheck-select-checker 'vhdl-tool)
      (setq flycheck-checker 'vhdl-tool))))
#+end_src

Helper functions to start/stop =vhdl-tool= server for linting.
#+begin_src emacs-lisp
(defun ec-vhdl-tool--server-process-buffer-name ()
  "Get vhdl-tool server name for current project"
  (format "vhdl-tool server@%s" (projectile-project-root)))

(defun ec-vhdl-tool--server-start-p (buffer)
  "Return non-nil if the BUFFER associated process is started."
  (let ((process (get-buffer-process buffer)))
    (if process(eq (process-status (get-buffer-process buffer)) 'run)
      nil)))

(defun ec-vhdl-tool-stop-server ()
  "Stop vhdl-tool server if it is started."
  (interactive)
  (let ((buffer (ec-vhdl-tool--server-process-buffer-name)))
    (when (ec-vhdl-tool--server-start-p buffer)
      (kill-process (get-buffer-process buffer)))))

(defun ec-vhdl-tool-start-server ()
  "Start vhdl-tool server for linting."
  (interactive)
  (let* ((default-directory (projectile-project-root))
         (buffer (ec-vhdl-tool--server-process-buffer-name)))
    (unless (executable-find "vhdl-tool")
      (error "Can not find vhdl-tool"))
    (unless (file-exists-p ec-vhdl-tool-config)
      (error "Can not find %s @ %s" ec-vhdl-tool-config default-directory))
    (unless (ec-vhdl-tool--server-start-p buffer)
      (message "Starting vhdl-tool server")
      (start-process "vhdl-tool-sever" buffer "vhdl-tool" "server"))))
#+end_src

*** Hooks
Somehow the =lsp-vhdl= is broken from =lsp-mode=, create =lsp-client= manually
here until upstream fix it.
#+begin_src emacs-lisp
(after! lsp-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("vhdl-tool" "lsp"))
                    :major-modes '(vhdl-mode)
                    :language-id "VHDL"
                    :priority -1
                    :server-id 'lsp-vhdl)))
#+end_src

#+begin_src emacs-lisp
(after! vhdl-mode (add-hook! vhdl-mode #'ec-vhdl-init #'lsp #'ec-vhdl-tool-start-server))
#+end_src

*** yasnippets-vhdl
#+begin_src emacs-lisp
(use-package! yasnippets-vhdl
  :defer t)
#+end_src

*** Functions
vhdl-tool (v0.0.12 when added) would crash when get hover request on empty line.
Add advice function to skip =lsp-hover= on empty line.

**** ec--white-space-or-empty-line-p
#+begin_src emacs-lisp
(defun ec--whitespace-or-empty-line-p ()
  "Return non-nil if current line is empty or whitespaces only."
  (looking-at "^[[:space:]\n]*$"))
#+end_src

**** ec-skip-lsp-hover-on-empty-line
#+begin_src emacs-lisp
(defun ec-skip-lsp-hover-on-empty-line (f &rest args)
  "Skip lsp-hover on empty or whitespaces only lines."
  (if (ec--whitespace-or-empty-line-p)
      (setq lsp--hover-saved-bounds nil
            lsp--eldoc-saved-message nil)
    (apply f args)))
#+end_src

*** Key bindings
#+begin_src emacs-lisp
(after! vhdl-mode
  (map! :localleader
        :map vhdl-mode-map
        (:prefix ("t" . "+template")
                 "ar" #'vhdl-template-architecture
                 "at" #'vhdl-template-assert

                 "bl" #'vhdl-template-block

                 "ca" #'vhdl-template-case-is
                 "co" #'vhdl-template-constant

                 "ei" #'vhdl-template-elsif
                 "el" #'vhdl-template-else
                 "en" #'vhdl-template-entity

                 "fb" #'vhdl-template-function-body
                 "fd" #'vhdl-template-function-decl
                 "fl" #'vhdl-template-for-loop

                 "ge" #'vhdl-template-generic

                 "fg" #'vhdl-template-for-generate
                 "ig" #'vhdl-template-if-generate

                 "it" #'vhdl-template-if-then

                 "li" #'vhdl-template-library

                 "pc" #'vhdl-template-process-comb
                 "po" #'vhdl-template-port
                 "ps" #'vhdl-template-process-seq

                 "si" #'vhdl-template-signal
                 "su" #'vhdl-template-subtype

                 "ty" #'vhdl-template-type

                 "us" #'vhdl-template-use

                 "va" #'vhdl-template-variable

                 "Pn" #'vhdl-template-package-numeric-std
                 "Ps" #'vhdl-template-package-std-logic-1164
                 )))
#+end_src
*** Packages
**** vhdl-mode
#+begin_src emacs-lisp :tangle packages.el
(package! vhdl-mode
  :recipe (:host github
                 :repo "ezchi/vhdl-mode"
                 :branch "ec-release"))
#+end_src

**** yasnippets-vhdl
#+begin_src emacs-lisp :tangle packages.el
(package! yasnippets-vhdl
  :recipe (:host github
                 :repo "ezchi/yasnippets-vhdl"
                 :files ("*.el" ("snippets" ("vhdl-mode" "snippets/vhdl-mode/*")))))
#+end_src

** Verilog
*** Flycheck
The =verilator= does not working well with verification code. Disable =verilog-verilator= checker until it usable.

#+begin_src emacs-lisp
(after! flycheck
  (delq! 'verilog-verilator flycheck-checkers))
#+end_src

*** verilog-mode
#+begin_src emacs-lisp
(use-package! verilog-mode
  :defer t
  :mode "\\.[s]?v[h]?\\'"
  :hook ((verilog-mode . disable-single-quote-sp-pair)
         (verilog-mode . lsp))
  :config
  (defun disable-single-quote-sp-pair ()
    "Disable single quote sp-pair which does not work well for verilog-mode.
It is bad example for automatically inserting single quote pair:
  a = 1'b0;
  b = '0;"
    (sp-local-pair 'verilog-mode "'" nil :actions nil))

  (require 'lsp)
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("svls"))
                    :major-modes '(verilog-mode)
                    :priority 1
                    :server-id 'lsp-svls))
  (add-to-list 'lsp-language-id-configuration '(verilog-mode . "verilog"))

  (require 'flycheck)
  (add-to-list 'flycheck-disabled-checkers 'verilog-verilator)

  (setq verilog-align-ifelse nil)
  (setq verilog-auto-indent-on-newline t)
  (setq verilog-auto-lineup 'assignments)
  (setq verilog-auto-newline nil)
  (setq verilog-case-indent 4)
  (setq verilog-cexp-indent 0)
  (setq verilog-debug t)
  (setq verilog-highlight-grouping-keywords t)
  (setq verilog-highlight-includes t)
  (setq verilog-highlight-modules t)
  (setq verilog-highlight-translate-off t)
  (setq verilog-indent-begin-after-if nil)
  (setq verilog-indent-declaration-macros nil)
  (setq verilog-indent-level 4)
  (setq verilog-indent-level-behavioral 4)
  (setq verilog-indent-level-declaration 4)
  (setq verilog-indent-level-module 4)
  (setq verilog-indent-lists t)
  (setq verilog-library-extensions '(".v" ".sv" ".svh"))
  (setq verilog-minimum-comment-distance 40)
  (setq verilog-tab-always-indent t)
  (setq verilog-typedef-regexp "[a-zA-Z0-9_]+_t"))
#+end_src
*** SystemVerilog Language Server
Use [[https://github.com/dalance/svls][svls]] as SystemVerilog Language Server.
#+begin_src emacs-lisp :tangle no
(after! lsp
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("svls"))
                    :major-modes '(verilog-mode)
                    :priority 1
                    :server-id 'lsp-svls))
  (add-to-list 'lsp-language-id-configuration '(verilog-mode . "verilog")))
#+end_src
*** yasnippets-verilog
#+begin_src emacs-lisp
(use-package! yasnippets-verilog
  :defer t)
#+end_src

*** Packages
**** verilog-mode
#+begin_src emacs-lisp :tangle packages.el
(package! verilog-mode
  :recipe (:host github
                 :repo "ezchi/verilog-mode"
                 :branch "lite"))
#+end_src

**** yasnippets-verilog
#+begin_src emacs-lisp :tangle packages.el
(if (string= (system-name) "Enzes-MacBook-Pro.local")
    (package! yasnippets-verilog
      :recipe (:host github
               :repo "ezchi/yasnippets-verilog"
               :files ("*.el" ("snippets" ("verilog-mode" "snippets/verilog-mode/*")))))
  (package! yasnippets-verilog
    :recipe (:host github
             :repo "ezchi/yasnippets-verilog"
             :branch "feature/optiver"
             :files ("*.el" ("snippets" ("verilog-mode" "snippets/verilog-mode/*"))))))
#+end_src

* Tools
** Git
*** git-auto-commit-mode
#+begin_src emacs-lisp
(use-package! git-auto-commit-mode
  :commands (git-auto-commit-mode)
  :config
  (setq gac-debounce-interval 3600))
#+end_src

*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! git-auto-commit-mode)
#+end_src
** GPG :noexport:
These are encrypted with gpg and are essentially set mostly by custom-*
#+begin_src emacs-lisp :tangle no
(use-package! epa-file
  :config
  (epa-file-enable)
  (setq custom-file (concat doom-private-dir "local/private.el.gpg"))
  (load custom-file))
#+end_src
** Optiver
*** optiver-fex
#+begin_src emacs-lisp :tangle (if (string= (system-name) "Enzes-MacBook-Pro.local") "no" "packages.el")
(unless (string= (system-name) "Enzes-MacBook-Pro.local")
  (package! optiver-fex
    :recipe (:type git
                   :repo "ssh://git@git:7999/~enzchi/optiver-fex.git")))
#+end_src

#+begin_src emacs-lisp :tangle (if (string= (system-name) "Enzes-MacBook-Pro.local") "no" "yes")
(use-package! optiver-fex
  :commands (optiver-fex-rerun-previous-command optiver-fex-dispatch))
#+end_src
** Search
*** rg
Needs a solution to use =ripgrep= to search =gitignore= files in a project.

#+begin_src emacs-lisp
(use-package! rg)
(map! :n "SPC s / m" #'rg-menu
      :n "SPC s / r" #'rg)
#+end_src

** Terminal
*** mulit-term
Manage multiple =vterm= buffers.

#+begin_src emacs-lisp :tangle no
(use-package! multi-vterm
  :config
  (add-hook 'vterm-mode-hook
            (lambda ()
              (setq-local evil-insert-state-cursor 'box)
              (evil-insert-state)))
  (define-key vterm-mode-map [return]                      #'vterm-send-return)
  (setq vterm-keymap-exceptions nil)
  (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
  (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
  (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
  (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
  (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
  (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
  (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))
#+end_src

* Email

#+begin_src emacs-lisp
(after! mu4e
  (set-email-account! "Gmail"
                      '((mu4e-sent-folder       . "/[Gmail].Sent Mail")
                        (mu4e-drafts-folder     . "/[Gmail].Drafts")
                        (mu4e-trash-folder      . "/[Gmail].Trash")
                        (mu4e-refile-folder     . "/[Gmail].All Mail")
                        (smtpmail-smtp-server   . "smtp.gmail.com")
                        (smtpmail-smtp-service  . 587)
                        (smtpmail-smtp-user     . "Enze.Chi@gmail.com")
                        (mu4e-compose-signature . "\nEnze Chi"))
                      t))
#+end_src

Set bookmark for =Inbox= which excludes =Trash= folder

#+begin_src emacs-lisp
(after! mu4e
  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "Inbox"
                :query "maildir:/INBOX"
                :key ?i)))
#+end_src

Fetch for new email for every 5 minutes.
#+begin_src emacs-lisp
(after! mu4e
  (setq mu4e-update-interval 300))
#+end_src

* Packages
** org-pandoc-import
[[https://github.com/tecosaur/org-pandoc-import][Org Pandoc Import]]

#+begin_src emacs-lisp :tangle packages.el
(package! org-pandoc-import
  :recipe (:host github
                 :repo "tecosaur/org-pandoc-import"
                 :files ("*.el" "filters" "preprocessors")))
#+end_src

** rg
#+begin_src emacs-lisp :tangle packages.el
(package! rg)
#+end_src

** ecdate
#+begin_src emacs-lisp :tangle packages.el
(package! ecdate
  :recipe (:host github
                 :repo "ezchi/ecdate"))
#+end_src
